#title: 插件
#index:0,1
#author:zozoh(zozohtnt@gmail.com)
--------------------------------------------------------------------------------------------------------
什么是插件
	<plugin_motivation.png>

	如果我们的项目依赖了一个接口，但是我们在开发时，真的没办法确定，部署的时候，到底采用哪个实现。

	比如 Nutz 的 Log。 它在运行时，会判读当前运行环境 log4j 是否可用（有 log4j 的类，以及有 log4j 的配置
	文件），如果没有，它就检测 java.util.logging 是否可以用（有有效的配置文件），如果还没有，那么它就
	把日志信息输出到控制台上。它的实现，就是依靠的方式。

	但是，同复杂强大的 OSGI 插件体系不同，这里的插件只是强调，在部署时决定采用什么实现。在运行时，它是没
	办法更改的。因此 Nutz 虽然在编译时依赖了 Log4j，但是在运行时，没有 log4j 的 jar，依然能够工作的很好。

	也正因为，这个插件简单的令人发指。有兴趣的同学可以参看：
	[http://code.google.com/p/nutz/source/browse/#svn/trunk/src/org/nutz/plugin org.nutz.plugin] 里面的源
	代码，我想几分钟你就会全部看完。
--------------------------------------------------------------------------------------------------------
简单使用插件
	比如有一个接口：
	{{{<Java>
	public interface Said{
		String say();
	}
	}}}
	你有两个实现类：
	 * 实现类 A
		{{{<Java>
		public class TomSaid implements Said{
			public String say(){
				return "I am Tom";
			}
		}
		}}}
	 * 实现类 B	
		{{{<Java>
		public class PeterSaid implements Said{
			public String say(){
				return "I am Peter";
			}
		}
		}}}
	这两个实现类分别放在两个 jar 包里，在你的工程部署时，负责部署的工程师很希望：
	 * 将 tom.jar 放到项目里，整个工程就会使用 TomSaid，
	 * 将 peter.jar 放到项目，整个工程就会使用 PeterSaid，
	 * 将两个 jar 都放到项目，PeterSaid 有更高的优先级
	
	{#13A;*怎样做到这一点呢？}

	首先我们需要为 TomSaid 实现一个插件：
	{{{<Java>
	public class TomSaidPlugin extends TomSaid implements Plugin{
		public boolean canWork(){
			try {
				Class.forName("com.you.app.TomSaid");
				return true;
			} catch (ClassNotFoundException e) {}
			return false;
		}
	}
	}}}
	{/这个类需要同 TomSaid 放到一个 jar 包里。}

	同理，为 PeterSaid 也实现一个插件：
	{{{<Java>
	public class PeterSaidPlugin extends PeterSaid implements Plugin{
		public boolean canWork(){
			try {
				Class.forName("com.you.app.PeterSaid");
				return true;
			} catch (ClassNotFoundException e) {}
			return false;
		}
	}
	}}}
	{/这个类需要同 PeterSaid 放到一个 jar 包里。}

	在调用代码里这样实现：
	{{{<Java>
	PluginManager<Said> plugins = new SimplePluginManager<Said>(
				"com.you.app.PeterSaidPlugin",
				"com.you.app.TomSaidPlugin");
	Said said = plugins.get();
	System.out.println(said.say());
	}}}
	上面的代码既不依赖 PeterSaid，也不依赖 TomSaid，完全能满足部署工程师的要求。

	采用 SimplePluginManager 有几个注意事项：
	 * 插件实现类必须有一个默认的构造函数
	 * 插件实现类必须实现目标接口，在上例中就是 Said 接口
	 * 构造函数参数的顺序，就是插件的优先级，第一个最优先
	
--------------------------------------------------------------------------------------------------------
与 Ioc 容器一起工作
--------------------------------------------------------------------------------------------------------