#title: Nutz.Ioc 简要使用手册
#index:0,3

概要介绍
	Nutz.Ioc 不同于 Spring 和 Guice，它的注入信息是存放在 Json 文件或者是数据库中的。

通过 Json 文件装配对象
	一个最简单的例子
		比如你如果有一个对象
		{{{<java>
		package zzh.core.ioc;

		import java.util.Calendar;

		public class MyBean {
			private int level;
			private Calendar time;
			private String name;
			private boolean ok;

			public int getLevel() {
				return level;
			}

			public Calendar getTime() {
				return time;
			}

			public String getName() {
				return name;
			}

			public boolean isOk() {
				return ok;
			}

		}
		}}}

		你可以写一个如下的 Json 文件

		{*_core/ioc/test.js}
		{{{<json>
		{
		// -----------------------------------------------------
		abc: {
			type: "zzh.core.ioc.MyBean",
			fields: {
				level : 14,
				time : "2009-9-21 12:15:23",
				name : "abc",
				ok : true
			}
		}
		//-----------------------------------------------------
		}
		}}}

		在 Java 程序里，这么调用
		{{{<java>
		package zzh.core.ioc;

		import org.nutz.castor.Castors;
		import org.nutz.ioc.Ioc;
		import org.nutz.ioc.impl.NutIoc;
		import org.nutz.ioc.json.JsonLoader;

		public class TryMyBean {

			public static void main(String[] args) {
				Ioc ioc = new NutIoc(new JsonLoader("zzh/core/ioc/test.js"));
				MyBean mb = ioc.get(MyBean.class, "abc");
				System.out.printf("Level: %s\n", mb.getLevel());
				System.out.printf("Name: %s\n", mb.getName());
				System.out.printf("Time: %s\n", Castors.me().castToString(mb.getTime()));
			}

		}
		}}}

		在控制台则会输出
		{{{<shell>
		Level: 14
		Level: abc
		Level: 2009-09-21 12:15:23
		}}}

	添加拦截器
		自定义拦截器
			只要从 Nutz.Ioc 里面获得的对象，都可以呗添加方法拦截器。你添加的拦截器可以作用
			在所有的 public 和 protected 的非静态方法上。
			需要添加的拦截器必须实现 org.nutz.aop.MethodListener 接口，比如：
			{{{<java>
			package zzh.core.ioc;

			import java.lang.reflect.Method;
			import org.nutz.aop.MethodListener;

			public class MyMethodListener implements MethodListener {

				@Override
				public Object afterInvoke(Object obj, Object returnObj, Method method, Object... args) {
					System.out.println("I am after");
					return returnObj;
				}

				@Override
				public boolean beforeInvoke(Object obj, Method method, Object... args) {
					System.out.println("I am before");
					return true;
				}

				@Override
				public void whenError(Throwable e, Object obj, Method method, Object... args) {}

				@Override
				public void whenException(Exception e, Object obj, Method method, Object... args) {}

			}
			}}}
			在监听器的实现类中:
			  * beforeInvoke 返回如果是 false，那么你监听的方法就不会被调用到。
			  * afterInvoke 可以返回任意对象，这个返回会被真正传递给调用者。但是你返回的类型必须是可以被直接转型成你要监听的方法的返回值的，否则会报错
			  * 如果 beforeInvoke 返回的是 false, 那么 afterInvoke 的 returnObj 参数，收到的将是 null
			  * 如果你监听的参数返回值是 void 类型，那么你在 afterInvoke 返回的任何对象都会被忽略
			在刚才的 Json 文件中添加一段

			{*core/ioc/test.js}
			{{{<json>
			{
			// -----------------------------------------------------
			abc: {
				type: "zzh.core.ioc.MyBean",
				fields: {
					level : 14,
					time : "2009-9-21 12:15:23",
					name : "abc",
					ok : true
				}
			},
			//-----------------------------------------------------
			mylstn : {
				type :"zzh.core.ioc.MyMethodListener"
			},
			//-----------------------------------------------------
			$aop : {
				byname : {
					".*" : [ {
						type :"org.nutz.ioc.impl.AopMethod",
						fields : {
							methods : {args : [ ".*" ]},
							listeners : [ {refer :"mylstn"} ]
						}
					} ]
				}
			}
			//-----------------------------------------------------
			}
			}}}

			多添加了两个对象， {*mylstn} 你是自定义的监听器。  {*$aop} 是 Nutz.Ioc 保留的一个对象名称，它有两个属性 "byname" 和 "bytype"，这两个属性的值是一样的。 
			* byname 的意思是，你打算拦截叫什么名字的对象。 
			* bytype 的意思是你打算拦截为什么类型的对象。

			以 byname 为例，它的值是由一组名值对构成的，上面的例子只有一个名值对。 {{{".*"}}} 是个正则表达式，表示匹配任何对象。

			值是个数组，数组里面每个元素都是一个 AopMethod，它声明两个信息：
			# 要匹配哪些方法？ _在其值的构造方法中，传入正则表达式 {{{".*"}}} 表示要匹配所有能监听的方法_
			# 对匹配上的方法，要采用哪些监听器?  _上面的例子，只有一个监听器 -- 引用 $mylstn_

			执行，在控制台上，会出现:
			{{{<shell>
			I am before
			I am after
			Level: 14
			I am before
			I am after
			Name: abc
			I am before
			I am after
			Time: 2009-09-21 12:15:23
			}}}


		内置的日志输出
			Nutz 提供了一个内置的日志输出监听器，通过拦截器，可以很容易的将日志输出监听器绑定在你关心的方法上，比如
			{*core/ioc/test.js}
			{{{
			{
			// -----------------------------------------------------
			abc: {
				type: "zzh.core.ioc.MyBean",
				fields: {
					level : 14,
					time : "2009-9-21 12:15:23",
					name : "abc",
					ok : true
				}
			},
			// -----------------------------------------------------
			mylstn : {
				type :"zzh.core.ioc.MyMethodListener"
			},
			// ---------------------------------------------------------
			loglstn : {
				type :"org.nutz.log.aop.LogListener",
				args : [ {
					type :"org.nutz.log.Log",
					fields : {
						format : {
							type : "org.nutz.log.LogFormat",
							args: [true, "yy-MM-dd hh-mm-ss.SSS"]
						},
						output : {
							type :"org.nutz.log.file.FileLogOutput",
							args : ["e:/tmp/log.txt"]
						}
					}
				}]
			},
			// -----------------------------------------------------
			$aop : {
				byname : {
					".*" : [ {
						type :"org.nutz.ioc.impl.AopMethod",
						fields : {
							methods : {args : [ ".*" ]},
							listeners : [ {refer :"mylstn"}, {refer:"loglstn"} ]
						}
					} ]
				}
			}
			// -----------------------------------------------------
			}
			}}}
			在文件中多添加一个 {*loglstn} 对象，在 {*$aop} 里面，再添加一个拦截器

			对于 {*loglstn} 对象
			  * {*format} 属性，指明了每行日志信息的格式， 在其 {*args} 里声明了构造方法的两个属性:
				* true 表示打印线程名称
				* "yy-MM-dd hh-mm-ss.SSS" 是时间输出的格式 (其值可以参见 java.text.SimpleDateFormat 的构造方法)。
			  * {*output} 属性指明了日志输出的方式。 
				* Nutz 给你提供默认的文件输出 org.nutz.log.file.FileLogOutput
				  * 构造方法需要一个文件的路径
				  * Nutz 会考虑多个线程同时写入文件等问题
				  * 如果这个文件不存在， 会自动创建这个文件
				* 也提供给你默认的控制台输出 org.nutz.log.ConsoleOutput
				* 你可以写你自己的输出， 只要实现 org.nutz.log.LogOutput 接口即可

			执行，然后打开

			{_*e:/tmp/log.txt}
			{{{
			09-06-24 12-54-11.345 [main] >MyBean.getLevel
			09-06-24 12-54-11.346 [main] ~MyBean.getLevel:14
			09-06-24 12-54-11.347 [main] >MyBean.getName
			09-06-24 12-54-11.347 [main] ~MyBean.getName:abc
			09-06-24 12-54-11.347 [main] >MyBean.getTime
			09-06-24 12-54-11.347 [main] ~MyBean.getTime:java.util.GregorianCalendar[time=1253506523000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Asia/Shanghai",offset=28800000,dstSavings=0,useDaylight=false,transitions=19,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2009,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=264,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=15,SECOND=23,MILLISECOND=0,ZONE_OFFSET=28800000,DST_OFFSET=0]
			}}}

			日志文件的格式说明：

			  * 符号 {*>} 表示进入函数后调用堆栈的深度，如果进入多层会出现 {*>>>>}
			  * 符号 {*~} 表示退出函数前调用堆栈的深度，如果进入多层会出现 {*{{{~~~~}}}}
			  * 如果调用的函数有参数，将在 > 行打印每个参数的 toString()
			  * 退出时，打印返回值的 toString()
				* void 函数，打印 void
				* 返回为 null，打印 null