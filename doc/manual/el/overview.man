#title: EL 表达式引擎
#author:zozoh(zozohtnt@gmail.com)
#author:wendal(wendal1985@gmail.com)
#index:0,1
------------------------------------------------------------------------
为什么需要 EL 表达式引擎

    总之我们是需要它的 ...
    
     * 一个表达式计算的结果会是某一种数据类型

    表达式引擎的工作过程是：
     # 将字符串拆解成一组有意义的符号
     # 将符号组成一个 ELItem 的树，每个节点在运行时都共享一个上下文环境
         * 永远都只有一个根节点
         * 每个 ELGroup 都有一个子项目链表以及一个操作符链表 （后缀表达式）

------------------------------------------------------------------------
支持的操作符

    || 符号  || 优先级 ||  解释         ||
    || .     || 100    ||  对象访问符   ||
    || `[n]` || 90     ||  集合或Map访问符 ||
    || *     || 50     ||  乘           ||
    || /     || 50     ||  整除         ||
    || %     || 50     ||  取模         ||
    || +     || 10     ||  加           ||
    || -     || 10     ||  减           ||
    || >=    || 5      ||  大于等于     ||
    || <=    || 5      ||  小于等于     ||
    || ==    || 5      ||  等于         ||
    || >     || 5      ||  大于         ||
    || <     || 5      ||  小于         ||


     * 支持 `(` 以及 `)` 的分组
     * 操作符后面的分组符表示分组
     * 变量后面的分组符，表示函数调用
     * 操作符是可以扩展的

------------------------------------------------------------------------
支持的数据类型

    || 名称     || 例子              ||
    || 变量     || a2                ||
    || 整数     || 23                ||
    || 浮点数   || 56.6              ||
    || 字符串   || 'abc' 或者 "Haha" ||
    || 布尔     || true 或 false     ||

------------------------------------------------------------------------
简单使用
	
	{{{<JAVA>
	System.out.println(El.eval("3+2*5"));
	//打印  13
	}}}
	
	{{{<JAVA>
	Context context = new Context();
	Pet pet = new Pet();
	pet.setName("GFW");
	context.set("pet",pet);
	System.out.println(El.eval(context,"pet.name"));
	//打印  GFW
	}}}
