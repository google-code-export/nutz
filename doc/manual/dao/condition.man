#title: 复杂的SQL条件
#index:0,1

------------------------------------------------------------------------------------------------------------
概述
	什么是 Nutz.Dao 中的复杂SQL条件
		* 对于 Nutz.Dao 来说，它本质上就是将你的 Java 对象转化成 SQL，然后交给 JDBC 去执行。
		* 而 SQL 中，当执行数据删除和查询操作时，最常用的就是 WHERE 关键字。
		* WHERE 关键字后面的就是所谓的复杂查询条件
	Nutz.Dao 将如何如何使用这个条件
		* Dao 接口的 clear 方法和 query 方法的第二个参数，就是为了生成 WHERE 后面那段字符串设计的
		* 这个参数是一个 org.nutz.dao.Condition 接口的实现类
		* 通过该接口的 toString(org.nutz.dao.entity.Entity) 方法， Nutz.Dao 将获得 WHERE 后面那段字符串
		* 当然也包括 ORDER BY
------------------------------------------------------------------------------------------------------------
Condition 接口
	* 这个接口只有一个方法 toString()
		* 这个方法带一个参数 org.nutz.dao.entity.Entity
		* 通过这个参数，实现者可以获得当前需要操作的实体的配置信息
		* 当然，如果你不需要的话，你可以不理睬这个参数
	* Nutz.Dao 会将 toString() 的返回直接拼接到SQL 的 WHERE 关键字后面
		* 如果你返回的字符串以 WHERE 或者 ORDER BY 开头，它会直接使用，否则会补上一个 WHERE 关键字
		* 这个判断会忽略前后空白以及大小写
------------------------------------------------------------------------------------------------------------
Nutz 给你的快速实现
	* 如果你的数据库字段被假设不会发生变化，用直接硬编码是个很好的选择
	* 如果在开发期，你的数据库字段变化非常频繁，用 Cnd 工具类则是更好的选择

	直接硬编码
		最简单直接的方法就是直接输出 WHERE 关键字后面的 SQL 代码了。比如查询一个 Person 对象
		{{{<JAVA>
		List<Person> crowd = dao.query(Person.class, Cnd.wrap("name LIKE 'J%' AND age>20"), null);
		}}}
		这句话，就会将所有名称以 J 开头，并且年龄超过20岁的人全部查询出来。参看 [dao_get_start.html Nutz.Dao 入门]
		针对 Person 对象的描述，实际上，上面那句话执行的 SQL 代码为：
		{{{<SQL>
		SELECT * FROM t_person WHERE name LIKE 'J%' AND age>20;
		}}}
		当然你要是写
		{{{<JAVA>
		Cnd.wrap("name LIKE 'J%' AND age>20 ORDER BY name ASC");
		}}}
		就会按照 name 字段排序。
	一个友好一些的工具类 -- Cnd
		有些情况，数据库中的字段同 Java 对象中的字段并不同名，所以就需要给 Java 字段上的数据库字段注解加上参数 @Column({#F0F;"数据库字段明"})
		如果你通过 Cnd.wrap() 硬编码某个字段，那么当这个字段数据库字段名发生改变时，你就需要改动很多。
		因此你希望仅仅将对于数据库的变动限制在 Java 对象的源文件里
		所以 Nutz 提供了 Cnd.where() 方法
		{{{<Java>
		Condition c = Cnd.where("age",">",30).and("name", "LIKE", "%K%").asc("name").desc("id");
		}}}
		这个条件将生成 SQL 
		{{{<SQL>
		WHERE age>30 AND name LIKE '%K%' ORDERBY name ASC, id DESC
		}}}
		你也可以嵌套表达式
		{{{<JAVA>
		ExpGroup e1 = Cnd.exps("name", "LIKE", "P%").and("age", ">", "20");
		ExpGroup e2 = Cnd.exps("name", "LIKE", "S%").and("age", "<", "30");
		Condition c = Cnd.where(e1).or(e2).asc("name");
		}}}
		这个条件将生成 SQL 
		{{{<SQL>
		WHERE (name LIKE 'P%' AND age>'20') OR (name LIKE 'S%' AND age<'30') ORDER BY name ASC
		}}}
------------------------------------------------------------------------------------------------------------
HttpCondition 接口
	* 在大多数部署在 JSP/Servlet 容器 {_(比如 Apache Tomcat)} 中的应用，SQL 的查询条件通常来自 HTTP 请求的参数。
	* Nutz 在 mvc 的包中提供了 org.nutz.mvc.HttpCondition 接口
		* 它本质上是个抽象类
		* 它实现了 org.nutz.dao.Condition 接口
	* 通过静态方法 HttpCondition.getInstance() 可以获得它的一个内部实现
		* 这个实现将所有的 Http 参数假定成 SQL 的条件
		* 所有的条件都是 " {*与(AND) } " 的关系
		* 如果 HTTP 的参数为 {#A00;name=abc&age=15} 生成的 SQL 将为 {#00A;name='abc' AND age=15}
	* 你可以通过继承 HttpCondition 实现自己的 HttpCondition
		* 需要重载一个参数为 HttpServletRequest 的公共构造函数。
		* 通过复写 setOrderBy 方法 以及实现 `toString(Entity<?>)` 来控制输出内容
		* 你可以将你的 HttpCondition 配置在 Nutz.mvc 框架提供的 Query 控制器中
			* 通过 Nutz.Ioc 框架，你可以很容易做到这一点
