#title: How to compile & test (for Eclipse)
#index:0
#author:Peter.Tung(mastung@gmail.com)

--------------------------------------------------------------------------------------------------------------------------------------------
To build Eclipse compiling environment
	1. Preparing the folders

		<imgs/build/01.png>

	2. Using SVN tools
		  * Windows users： You can use [http://tortoisesvn.net tortoise SVN]
		  * Linux users： You know how to use that :p
		 
		 <imgs/build/02.png>

		 to connect http://nutz.googlecode.com/svn

	3. SVN is slow to connect through http, it may takes about tens seconds to minutes. After connecting successfully, to choose trunk folder, and to checkout
		
		<imgs/build/03.png>

	4. To choose Checkout destination folder, and click ok
		
		<imgs/build/04.png>

		supposing our destination is D:\nutz\svn\trunk

	5. After you click OK, it will start to download all Nutz files
		
		<imgs/build/05.png>

		Nutz files are not too many, through ADSL, it may takes about half minute to download them：

		<imgs/build/05_2.png>

		After you download successfully, your folder structure should be：

		<imgs/build/05_3.png>


	6. To prepare the dependency jar files
		
		<imgs/build/06.png>

		Nutz depends on other jars? Yes, we depends on javassist currently. We don't use ASM, since the schedule is quite tight.
		javassist is good to do its job.
		
		Nutz.Dao test case is runing on Mysql/Psql/Oracle/SqlServer2000/SqlServer2005, so we need one of their JDBC drivers.
		You can choose your favorite ones. I prefer PSQL, of cause, most people like MySQL.
		
		Apache provides two connection pool jar files. We can simply to create DataSource, you can choose your favorite connection pool implementations: c3p0, proxool, 
		At least, you have to prepare the jar file.

		Except javassist, no other jars will impact the compiling of Nutz. You also needs Junit, Apache connection pool, and JDBC drivers to run the test.

		We put the jar files into D:/nutz/deps, we will need them later

	7. Open Eclipse, Set workspace D:/nutz/workspace
		
		<imgs/build/07.png>

	8. It's clear at all
		
		<imgs/build/08.png>

		of cause, you can do the operation in exist workspaces.

	9. To add Tomcat Server (You have to install Tomcat at first)
		
		We needs Servlet relative jars to compile
		 {*Window > Preferences > Server > Runtime Environment > Add} to select
		 {*Apache > Apache Tomcat v6.0} （{/Since I installed Tomcat6.0}）
		Click next, fill Tomcat install path
		
		<imgs/build/09.png>

		then click finish or OK, to confirm all dialogs.

	10. Select File > New, in the dialog, select create normal Java project（Java Project）, then click Next
		
		<imgs/build/10.png>

		 * input the project name： nutz@google   (in fact, you can input whatever you want)
		 * click Finish.
		 * You can choose or not the Java perspective

	11. In the new project, there is a src folder, and default JRE System Library. To select src, press delete button to delete it, we don't need it.
		
		<imgs/build/11.png>

	12. After clearing the project, we can link the Nutz SVN folders：
		
		<imgs/build/12.png>

		right click project name, and select New > Folder

	13. In the dialog, select link the folder in the system
		
		<imgs/build/13.png>

	14. Click Finish, the folder is added into the project
		
		<imgs/build/14.png>

		You can follow the same process to add other folders like test folder

		<imgs/build/14_2.png>

		{#F00;*Attention}，files in doc folder are UTF-8 encoding. So you'd better change the doc folder properties（right click folder, and select properties）
		Text file encoding to UTF-8. Then, your eclipse can display the doc file correctly.

		<imgs/build/14_3.png>

		Meanwhile, you also need {#F00;*set test and src folders to UTF-8} encoding.

	15. To configure build path
		
		<imgs/build/15.png>

	16. In Configure Build Path dialog, add src and test folder as source folders
		
		<imgs/build/16.png>

		Notes: Don't forget to add filter pattern:

		<imgs/build/16_2.png>

		Or, there will be compiling warnings. Because svn cache folders are also treated as sources. To add src and test folders filter pattern to let Eclipse 
		ignore all .svn folders
		
		Filter pattern is：  {#00A;* `**/.svn/**` }

	17. To check, if the result is like this, pay attention the red areas：
		
		<imgs/build/17.png>

	18. At last, we need to set the dependence packages

		To add dependence Jar files
		
		<imgs/build/18.png>

		After confirm, to click Add Library ..., in the dialog to select Server Runtime. And then, to select the Apache Tomcat 6.0

		<imgs/build/18_2.png>

		To run the JUnit test, you need to add JUnit 4 jar files: Add Library... > JUnit > JUnit 4 > OK

		then, all the dependences should be like this

		<imgs/build/18_3.png>

	19. Fininally, You setup your Nutz environment, and Eclipse should automatically compile successfully.
		
		<imgs/build/19.png>
--------------------------------------------------------------------------------------------------------------------------------------------
How to run JUnit test

	1. We need A) a database, B) a properties file
		
		At first, you need create a test database, like, zzhtest.
		{{{
		mysql:> create database zzhtest;
		}}}

	2. Then, in Eclipse project, add a source folder ：right click project > New > Source Folder
		
		 # Input a name for the Folder, like {*properties}
		 # Set the folder as Source Folder
		 # create a txt file {*nutz-test.properties} in it
		
		The file content is：
		{{{
		driver=com.mysql.jdbc.Driver
		url=jdbc:mysql://127.0.0.1:3306/zzhtest
		username=root
		password=123456
		}}}

		You need modify it based your configuration. The project structure should be：
		
		<imgs/build/21.png>

		I don't put the nutz-test.properties in the SVN, since its properties are not the same in different environments.

	3. After that, to open test/org/nutz/TestAll.java, run it as JUnit
		
		<imgs/build/22.png>

	4. You should get the following result like：
		
		<imgs/build/23.png>
--------------------------------------------------------------------------------------------------------------------------------------------
At last ...
	
	 * Nutz is an open source project, you can modify the source code, and then run JUnit test to verify your modifications
	 * You can add more JUnit test, to check Nutz's quality
	 * If you find bugs or correct some issues, please send mails to nutzam@googlegroups.com with your codes.
	 * We will be very happy for your contribution. If you suggest more than 5 corrections, you will be invited as Nutz Committer
	 * About how to be a Nutz Committer, please refer [for_committer.man here]
	
	And：

	 * In build folder, there is build.xml, you can use ant to compile it
	 * If you want to use Nutz in your project, just add Nutz and Javassist jar files into your build path

