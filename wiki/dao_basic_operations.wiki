#summary Dao 接口的基本操作
=Top=
<p align="center"><font size=6>* Dao 接口的基本操作 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>

<p align="right">[#Top]</p>
=`概述`=
传统关系型数据库定义了四种数据操作：  

      # 插入 Insert 
      # 删除 Delete 
      # 更新 Update 
      # 查询 Query 
可以说，这四种操作涵盖了所有的数据操作。并且，除了  插入  操作，所有的操作都是可以一次针对多条记录的。  

但是，Nutz.Dao 认为从使用者的角度来看，这四种操作还是有所不同的。比如，查询返回的结果，很多时候仅仅是一条记录。 我们需要为这种情况进行优化。所以，Nutz.Dao 在传统关系型数据库数据操作的基础上定义了如下的数据操作：  

|| 插入  || Insert	 || 插入一条记录  ||
|| 删除  || Delete	 || 删除一条记录  ||
|| 更新  || Update	 || 更新一条记录  ||
|| 获取  || Fetch	 || 获取一条记录  ||
|| 查询  || Query	 || 根据条件获取多条记录  ||
|| 清除  || Clear	 || 根据条件删除多条记录	 ||

因此，我们发现在 Nutz.Dao 的数据操作概念中，并不支持一次更新多条记录。 如果需要一次更新多条记录，你需要自己定义 SQL。 关于如何定义和管理自己的 SQL，请参看  [dao_customized_sql 自定义SQL ]  

----

<p align="right">[#Top]</p>
=`示例的前提条件`=
      * 我们假设已经创建了实体类  *com.zzh.demo.Person * 和实体表  *`t_person `*
      * 在文档  [dao_get_start.man Nutz.Dao 入门 ] 中，我们已经声明了这个实体 
      * 下述所有的操作都是假设已经有了 dao 变量，并且它指向一个 Dao 的实例。文档  [dao_get_start.man Nutz.Dao 入门 ] 中， 我们给出了如何创建 Dao 实例，以及如何搭建运行环境 
----

<p align="right">[#Top]</p>
=`插入 Insert`=
{{{
Person p = new Person();
p.setName("Peter");
p.setAge(22);
dao.insert(p);
System.out.println(p.getId());
}}}

Person 对象的 Id 被自动更新了。  

      * 更多的关于 @Id 注解的描述，请参看  [dao_primary_key 关于主键 ] 以及  [dao_next_prev.man 在插入前后的为字段设值 ]
----

<p align="right">[#Top]</p>
=`取得 Fetch`=
根据名称获取 （如果你的实体声明了 @Name 字段）  

{{{
Person p = dao.fetch(Person.class,"Peter");
System.out.println(p.getId());
}}}

根据 ID 获取 （如果你的实体声明了 @Id 字段）  

{{{
Person p = dao.fetch(Person.class,2);
System.out.println(p.getName());
}}}

----

<p align="right">[#Top]</p>
=`更新 Update`=
{{{
Person p = dao.fetch(Person.class,2);
p.setAge(32);
dao.update(p)
}}}

----

<p align="right">[#Top]</p>
=`删除 Delete`=
根据名称删除 （如果你的实体声明了 @Name 字段）  

{{{
dao.delete(Person.class,"Peter");
}}}

根据 ID 删除 （如果你的实体声明了 @Id 字段）  

{{{
dao.delete(Person.class,2);
}}}

  

----

<p align="right">[#Top]</p>
=`查询 Query`=

<p align="right">[#Top]</p>
==`查询全部记录`==
{{{
List<Person> = dao.query(Person.class,null,null);
}}}


<p align="right">[#Top]</p>
==`按条件查询`==
{{{
List<Person> people = dao.query(Person.class, Cnd.where("name", "like", "P%"), null);
}}}

        * Cnd 类的全名是 org.nutz.dao.Cnd 
            * 它主要是用来快速替你建立一个 org.nutz.dao.Condition 接口的实现类 
            * where() 函数 第一个参数是字段名，要和 Java 类里面的字段名相同。 
            * `where() 函数 第二个参数遵循 SQL 的标准，可以是 >, <, >=, <= 等等 `
            * 提供了一个 wrap 函数，你可以直接写 SQL 的条件 
        * 如果你愿意，你完全可以自己实现一个 Condition，来做更复杂灵活的判断 
        * 关于更多的查询条件的说明，请参看  [dao_condition 复杂条件 ]

<p align="right">[#Top]</p>
==`分页查询`==
{{{
List<Person>people = dao.query(Person.class, null, dao.createPager(1, 4));
}}}

        * dao.createPager 第一个参数是第几页，第二参数是一页有多少条记录 
        * 关于分页更多的说明，请参看  [dao_pager 分页查询 ]
----

<p align="right">[#Top]</p>
=`清除 Clear`=

<p align="right">[#Top]</p>
==`清除所有记录`==
{{{
dao.clear(Person.class);
}}}


<p align="right">[#Top]</p>
==`按条件清除`==
{{{
dao.clear(Person.class,Cnd.where("id", ">", 35));
}}}

        * 关于更多的清除条件的说明，请参看  [dao_condition 复杂条件 ]
----

<p align="right">[#Top]</p>
=`插入和更新集合`=
无论是插入 (Insert) 还是更新 (Update)，你传入的对象都可以不仅仅是一个 POJO，你可以传入：  

      * `集合 ( Collection<?> ) `
      * `Map<?,?> `
      * `数组 ( T[] ) `
Nutz.Dao 会自动替你拆包，对集合成员依次执行相应操作  

