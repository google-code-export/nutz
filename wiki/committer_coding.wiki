#summary Nutz Java 编码规范 (V1.0)
=Top=
<p align="center"><font size=6>* Nutz Java 编码规范 (V1.0) *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`0. 规范的规范`=


      # 本规范的每一条目必须无二义性，并且可执行。否则作废
      # 本规范的条目分为两个级别:
          * 规则 -<font color="#FF0000"><b>R </b></font>
          * 建议 -<font color="#008800"><b>S </b></font>
      # 本规范所有的“规则”条目必须被遵守
----

<p align="right">[#Top]</p>
=`1. 代码格式`=
      # <font color="#FF0000"><b>R </b></font>-使用统一的 Eclipse 的代码格式:[http://code.google.com/p/nutz/source/browse/trunk/doc/eclipse/nutz-eclipse-java-code-format-1.0.xml http://code.google.com/p/nutz/source/browse/trunk/doc/eclipse/nutz-eclipse-java-code-format-1.0.xml ]
          * 请从 svn 的 trunk/doc/eclipse/nutz-eclipse-java-code-format-1.0.xml 获得此文件
      # <font color="#008800"><b>S </b></font>-非 Eclipse 用户请阅读上述 XML 代码自行遵守
          * <i>基本上我们没有为非 Eclipse 用户指定规范，我们还没有一个好办法 </i>
----

<p align="right">[#Top]</p>
=`2. 命名`=
----

<p align="right">[#Top]</p>
==`2.1 包`==
        # <font color="#FF0000"><b>R </b></font>-包名必须全部小写，2个以内单词。
            # <font color="#008800"><b>S </b></font>-最好为 1 个单数名词
        # <font color="#FF0000"><b>R </b></font>-所有项目的包要以 “org.nutz” 为父 包 。
----

<p align="right">[#Top]</p>
==`2.2 类和接口`==
        # <font color="#008800"><b>S </b></font>-最好为名词
        # <font color="#FF0000"><b>R </b></font>-命名类和接口时，需要将所有单词的首字母大写。
        # <font color="#FF0000"><b>R </b></font>-接口的命名不采用首字母为 I 或加上 IF 后缀的命名方式 。例 如 ：IBookDao 、 BookDaoIF 等 。
        # <font color="#FF0000"><b>R </b></font>-抽象类必须使用 Abstract 作为类名的前缀，而接口建议使用 Interface 作为 接口名后缀。
        # <font color="#FF0000"><b>R </b></font>-异常类应该使用 Exception 做为 名称 后缀。
        # <font color="#FF0000"><b>R </b></font>-如果是运行一次就抛弃的类，以 ing 结尾，比如Rendering
        # <font color="#FF0000"><b>R </b></font>-类名尽量短，但是最好不要缩写，如果缩写，必须为特别常用的类，比如 org.nutz.dao.Cnd
            * 因为调用者书写你的类名太长，他(她)的IDE会自动替他(她)换行，他会觉得有点不爽
        # <font color="#FF0000"><b>R </b></font>-不要和 Java 的标准库中的类名冲突，比如 Class, Object, String 等
            * 如果冲突，就表示你极其藐视 Java 标准库中的那个的设计
            * 调用者需要花更多的时间和代码来明确他使用的是你的类, 而不是标准库中的那个
        # <font color="#008800"><b>S </b></font>-以下情况可以允许写奇怪类名 --^名称简短，让人一眼不知道什么意思，用了以后一眼就能知道什么意思 ^
            * 类特别常用
            * 类非常特殊，难以归类
            * 私有类或内部类
            * 不推荐其他人调用的 公有、保护、默认类
                * 起个奇怪的名字，就是不想让你关心这个类的代码
        # <font color="#FF0000"><b>R </b></font>-缺省接口实现应该使用 Default 名称 前缀 。例 如 ： DefaultEntityMaker。
            * 也可以采用 Impl 作为后缀，表示这个实现为此接口的最优实现或者唯一实现
----

<p align="right">[#Top]</p>
==`2.3 成员变量`==
        # <font color="#008800"><b>S </b></font>-最好为单数名词
        # <font color="#FF0000"><b>R </b></font>-能 private 就不要 default，能 default 就不要 protected，最好不要 public
        # <font color="#FF0000"><b>R </b></font>-如果是集合或数组，用复数名词
            * Map pets， 比 Map petMap 要好
        # <font color="#FF0000"><b>R </b></font>-不要用一个字母，尤其是 i，你可以用 index 或者 cursor 来代替
----

<p align="right">[#Top]</p>
==`2.4 常量`==
        # <font color="#FF0000"><b>R </b></font>`-命名常量（带有 final 修饰符的域）时需分隔。如 ： public final int MAX_VALUE = 30 。 `
----

<p align="right">[#Top]</p>
==`2.5 局部变量`==
        # <font color="#FF0000"><b>R </b></font>-局域变量名要尽量短，推荐用缩写，比如 StringBuilder sb
        # <font color="#FF0000"><b>R </b></font>-总的来说局部变量请随意命名，越短越好
比如这个就不好

{{{
 public String abc(String str){
	AbcObjectSet abcObjectSet = new AbcObjectSet();
	abcObjectSet.setName(str);
	return abcObjectSet.getBrief();
 }
}}}

而这个就很容易阅读了：

{{{
 public String abc(String str){
	AbcObjectSet aos = new AbcObjectSet();
	aos.setName(str);
	return aos.getBrief();
 }
}}}



----

<p align="right">[#Top]</p>
==`2.6 成员函数和静态函数`==
        # <font color="#FF0000"><b>R </b></font>-除了 setter / getter，其他的函数采用动词或者动名短语
        # <font color="#008800"><b>S </b></font>-以下情况可以允许写奇怪函数 --^名称简短，让人一眼不知道什么意思，用了以后一眼就能知道什么意思 ^
            # 函数特别常用
            # 函数非常特殊
            # 私有函数或默认函数
        # <font color="#008800"><b>S </b></font>-支持链式赋值的 setter 允许写成 ，并且也可以支持同名 getter
{{{
// Setter
public Pet name(String name){
	this.name = name;
	return this;
}

// Getter
public String name(){
	return this.name;
}
}}}

----

<p align="right">[#Top]</p>
=`3. 注释`=
      # <font color="#FF0000"><b>R </b></font>-注释必须和代码保持同步 。
      # <font color="#FF0000"><b>R </b></font>-注释中的第一个句子要以（英文）句号、问号或者感叹号结束。 Java成工具会将注释中的第一个句子放在方法汇总表和索引中。
      # <font color="#FF0000"><b>R </b></font>`-如果注释中有超过一个段落，用 <P> 标签 分隔。 `
      # <font color="#FF0000"><b>R </b></font>`-如果注释中有多个章节，用 <H2> 标签声明每个章节的标题。 `
      # <font color="#FF0000"><b>R </b></font>`-如果注释需要换行，用 <BR> 标签。 `
      # <font color="#FF0000"><b>R </b></font>`-示例代码以 <PRE></PRE> 包裹。 `
----

<p align="right">[#Top]</p>
==`3.1  类 Java Doc`==
        # <font color="#FF0000"><b>R </b></font>-要著名作者，格式为 @Author XiaoMing(xm@gmail.com)
        # <font color="#FF0000"><b>R </b></font>-继承的方法可以省略注释，但是被继承方法必须有注释。
----

<p align="right">[#Top]</p>
==`3.2  函数 Java Doc`==
        # <font color="#FF0000"><b>R </b></font>-简单的 get/set 方法可以省略注释。
        # <font color="#FF0000"><b>R </b></font>-继承的方法可以省略注释，但是被继承方法必须有注释。
----

<p align="right">[#Top]</p>
==`3.3  字段 Java Doc`==
        * <font color="#FF0000"><b>R </b></font>-没有更多说明了
----

<p align="right">[#Top]</p>
==`3.4  函数内部注释`==
        * <font color="#FF0000"><b>R </b></font>-行注释和块注释都是可以被接受的
        * <font color="#FF0000"><b>R </b></font>-不要写 JAVA DOC，没意义
        * <font color="#FF0000"><b>R </b></font>-代码质量不好但能正常运行，或者还没有实现的代码用 “ //TODO: ”
        * <font color="#FF0000"><b>R </b></font>-在 if ... else .. 分支上做注释格式应该如下：
{{{
// comments for case A
if(xxxx){
	//TODO you code here
}
/*
 * Multipline comments for case B
 */
else if(xxxxx){
	//TODO you code here
}
// comments for default case
else{
	//TODO you code here
}
}}}

----

<p align="right">[#Top]</p>
=`4. 编程`=
      # <font color="#FF0000"><b>R </b></font>-你的每一次提交，必须都是编译通过的
      # <font color="#FF0000"><b>R </b></font>-你的每一次提交，最好都是通过 JUnit 测试的
          * 除非有特别的情况 -- 比如你要和其他人分享的修改
      # <font color="#FF0000"><b>R </b></font>-无论任何时候，同样的功能，一段更短的代码，总比更长的代码要好
          * 这里的“短”，主要指的是“逻辑”短，而不是“字符长度”短
      # <font color="#FF0000"><b>R </b></font>-删掉一段代码的贡献，比增加一段代码的贡献要大，至少不比它小
      # <font color="#FF0000"><b>R </b></font>-避免过度设计
          * 先让代码能工作，然后重构成为优美的代码
          * 你需要知道，“接口”固定了架构，“类” 不是，当它进化为接口的时候就固定了
          * 代码结构设计请遵循《[http://blog.sina.com.cn/s/blog_4b19fa3701000720.html 草坪原则 ]》
----

<p align="right">[#Top]</p>
=`5. 单元测试`=
      # <font color="#FF0000"><b>R </b></font>-用例名请用 "<font color="#0000FF"><b>长名 </b></font>`" - 一句话，用下划线_代替空白 `
          * 通过这个名字，基本可以了解测试是干什么的
      # <font color="#FF0000"><b>R </b></font>-主要接口和实现类要尽可能多的被用例覆盖
