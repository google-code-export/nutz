<wiki:toc max_depth="2"/>
----
=概述 =
使用数据库的应用程序，多数情况下都需要使用 <font color="#0000AA">“分页”</font> 这个功能。尤其是在 Web 应用程序中，后端的分页查询尤其的普遍。 在以往的使用经验中，一个分页查询，除了能获取到一个列表外，我们通常需要如下几个信息才能在客户端显示出一个完整的翻页条。 

      * 当前页数 -- 第几页
      * 页大小 -- 每页有多少条记录
      * 总页数 -- 一共多少页
      * 总记录数 -- 如果不分页，一共有多少条记录
当我们获得了这四条信息后，对于维护一个翻页查询就足够。 

Nutz.Dao 的查询接口天然就支持翻页查询。并且每次会提供给你所有以上的信息。 

----
=Dao 接口的第三个参数 =
让我们先看看 Nutz.Dao 接口查询函数的声明： 

{{{
<T> List<T> query(Class<T> classOfT, Condition condition, Pager pager);
}}}
这个接口有三个参数，classOfT 告诉 Nutz.Dao 需要查询的实体类型，[condition condition] 告诉 Nutz.Dao 查询出的列表需要符 合的条件。详细请看 [condition 复杂条件]。最后一个参数，就是告诉 Nutz.Dao 将结果如何分页的了。 

      * Pager 的全名是 org.nutz.dao.Pager
      * 如果 pager 被传入了 null，则不分页
      * 生成 Pager 对象的时候需要传入 <font color="#0000AA">“当前页数”</font> 和 <font color="#0000AA">“页大小”</font>
      * 当执行完查询后，你可以通过 Pager 类提供的方法获取你需要的信息
          * 获取总页数:  pager.getPageCount()
          * 获取总记录数:  pager.getRecordCount()
----
=如何创建 Pager =
==Pager 的类型 ==
org.nutz.dao.Pager 是个抽象类，在第一版，它有如下实现: 

        # OraclePager
        # DB2Pager
        # MySQLPager
        # PostgresqlPager
        # SQLServerPager
当然，它还有一个默认的实现。当小数据量的时候，该默认实现是个很好的选择，当数据量比较庞大的时候，考虑的效率，不同的数据库总 有自己的分页办法。为此你需要告诉 Nutz.Dao 你打算具体采用哪一种数据的分页办法。 

如果你想使用其他的数据库的 Pager，你需要自己实现 Pager 类的子类。 

<font color="#FF0000">*需要指出的是*</font>，如果你声明了一个特殊的数据库类型的 Pager （即，不是默认的 Pager），那么就是说明你很关心你这次查询的速 度，所以Nutz.Dao 不会为你计算 Pager 中的 pageCount 和 recordCount。当然，如果你需要它们，你需要手工的通过 Dao 接口的 count() 方法计算结果，然后使用 Pager 里面的 setRecordCount() 方法将计算的结果传入 Pager 会自动为你计算 pageCount (在你调用了 setRecordCount() 方法后，直接调用 getPageCount() 函数即可)。 

----
==自动判断类型 Pager ==
在 Dao 接口中，提供了一个 Pager 的创建方法： 

{{{
Dao.createPager(int pageNumber, int pageSize);
}}}
你需要提供两个信息 

        # 第几页
        # 每页有多大
Nutz.Dao 会根据你设置的 DataSource，返回给你一个该数据库特殊的 Pager 的实例。如果你的 DataSource 不是上面提到那五个数据库， 则会返回给你一个默认的 Pager 实例。 

----
==使用指定的 Pager 类型 ==
Pager 还提供了一个静态方法， 

{{{
Pager pager = Pager.create(Pager.MySQL, 2, 3);
}}}
这样可以创建出一个专为 MySQL 设计的 Pager。 如果第一个参数是 null，那么，将得到一个 Pager 的默认的，和数据库无关实现。它的分页效 率最低，但是几乎可以应用在任何数据库下。 

让我们看一下函数 create 的声明: 

{{{
public static <T extends Pager> Pager create(Class<T> type, int pageNumber, int pageSize)
}}}
这个函数的目的是为了保留更大的灵活性，因为用户可能使用其他的数据库，并且他们或许会为该数据库创建自己专属的 Pager。通过这个函数 只要将用户创建的 Pager 的类型作为第一个参数传入即可。 

当然这个设计或许不是那么必要，因为用户完全可以写自己的静态函数，或者干脆在自己的 Pager 类提供一个类似的构造函数。但是这样调用 会让你的程序更加显得统一一些，不是吗? 

----
==自定义你自己的 Pager ==
`如果你想使用其他的数据库的 Pager，你需要自己实现 Pager 类的子类。在这个子类中，要求你实现一个 getLimitString() 方法。它要求你返回 一个字符串 Pattern， 这个字符串 Pattern 里面需要包含一个 %s 的占位符，在真正执行以前 Nutz.Dao 会使用 String.format() 方法， 用 "SELECT * FROM ... WHERE ... ORDER BY ..." 样式的字符串替换这个占位符。 `

有关更详细如何创建 Pager 的方法，感兴趣的朋友可以看看相关的源代码，它们并不复杂。我可以在这里给你提供一条线索： 结合 

        # com.zzh.dao.SqlMaker 类中的 makeQuerySQL() 方法
        # com.zzh.dao.Pager
        # com.zzh.dao.QuerySql 的源代码
你会明白Query后面的大多数秘密，其中也包括分页。 

