#summary 主键生成策略
<p align="center"><font size=6>* 主键生成策略 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="4"/>
=`关于 POJO 主键的说明`=
 关于 POJO 的主键，有下面几点说明：  

      *  主键可以是整型，也可以是字符型。 
      *  如果声明了 @Id，则主键为整型 
      *  如果未声明 @Id 但是声明了 @Name，则主键为字符型 
      *  如果既未声明 @Id 也未声明 @Name，则无主键 
=`主键生成策略概述`=
 由于大部分数据表会将主键设计成自增长的序列，对于多数的数据库插入操作，往往下一步操作是要获得新生成记录主键 的键值。因此，大多数的持久化框架都会通过这样或者那样的形式让调用者很方便的做到这一点，Nutz.Dao 也不例外。  

 不仅如此，Nutz.Dao 主键生成策略还考虑了如下几点  

      #  不同的数据库生成主键序列不一样 
      #  调用者的程序可能跑在不同的数据库上 
      #  调用者有时希望自己指定主键的值，而不是由数据库自动生成 
 针对这些假设， Nutz.Dao 通过注解 @Id 很好的完成了如下的功能  

----
=`自动生成的主键`=
==`默认获取主键`==
 当 POJO 的字段被加上注解  * @Id *  ，Nutz.Dao 便认为这个字段是个主键，并且是个自增长式的主键。如果你的 POJO 对应的 Java 字段不是整数类型(int 或者 long)时，Nutz.Dao 会抛出异常。  

 每当你执行 insert 接口时， Nutz.Dao 还会自动执行 SELECT MAX(...) FROM ... 来获取最新的 ID 值，并赋给POJO。  

==`使用数据库的方言获取主键`==
 当然，SELECT MAX() 在某些数据库中是不安全的。为此，你可以在  * @Id *  声明获取主键的数据库方言。  

===`仅支持一种数据库`===
 例如：  

{{{
@Column
@Id("SELECT currval('dao_fighter_id_seq');")
private int id;
}}}

 Nutz.Dao 会用你声明的 SQL 来获取最大的主键键值。  

===`让一个 POJO 支持多种数据库`===
 这个需求在生产环境基本上没有意义，但是在开发环境上或许有需要。起码对于 Nutz 来说，它的自动测试就需要 跑在不同的数据库上。  

{{{
@Column
@Id({"psql","SELECT currval('dao_fighter_id_seq');","mysql","SELECT MAX(id) FROM dao_fighter"})
private int id;
}}}

 Next 数组为偶数时，0或者偶数下标的元素为数据库的类型，奇数位下标元素为获取主键值的 SQL 语句。 数据库类型为字符串，不区分大小写，详细声明在接口 org.nutz.dao.Database 中有声明，这些值为  

          *  mysql 
          *  psql 
          *  db2 
          *  oracle 
          *  sqlserver 
          *  unknown 
----
=`手动生成的主键`=
 有些时候调用者并不希望数据库自动为自己生成主键。可以通过如下方式声明 POJO  

{{{
@Column
@Id(auto=false)
public int id;
}}}

 那么，在插入前，你需要手工为你的 POJO 设置主键键值。  

 如果你的主键是字符型的，需要用  * @Name *  注解来声明POJO对应字段。  

