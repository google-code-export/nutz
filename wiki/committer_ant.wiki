#summary 使用 Ant 编译
=Top=
<p align="center"><font size=6>* 使用 Ant 编译 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)  *wendal* (<font color="#080"> wendal1985@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`简单介绍`=
如果你不知道怎么从 svn 服务器下载 Nutz 的源代码，请看[committer_svn_project 从 SVN 编译 ]一节

编译通常是个麻烦的问题，依赖关系啊，环境变量啊，等等，全是些没有技术含量的东东，但是却能搞的你非常头疼。虽然编译 Nutz 是一个相对简单的工作 -- 它编译的时候不需要依赖第三方 jar 包，但是还是有一些工作要做的。

从我个人的情况来看，我经常在如下三个环境下进行 Nutz 的开发：

      * 公司 - Vista
      * 家 - Ubuntu
      * 笔记本 - Win XP
我这三台机器由于安装的时候不同，加上我是一个比较随意的人，所有依赖库的位置均有所不同，但是我配置编译环境基本上能在5分钟搞定。写这个介绍的目的就是分享我的一些经验，帮助大家远离痛苦，选择欢乐。

Nutz 提供 Ant 编译的脚本，在 Ant 运行前，你需要配置几个环境变量，在你的命令行客户端输入 ant，查看一下你的 ant 安装没有，如果没有请先从[http://ant.apache.org 它的官方网站下载 ]。你还需要检查：

      # Java 是否安装，Nutz 需要至少 1.5 以上版本
      # [http://tomcat.apache.org Tomcat ]（Nutz 需要它的 servletAPI），
      # [http://logging.apache.org/log4j/ Log4j ]在编译时需要它。 当然，运行时，我们不一定需要 Log4j
有了这些我们就可以顺利编译 Nutz 了。

我们提供了两个 ant 脚本：

      * build.xml - 快速编译，只编译 nutz.jar
      * build2.xml - 全面的编译 nutz 的 jar，文档，并运行单元测试，等等
----

<p align="right">[#Top]</p>
=`build.xml - 快速编译脚本`=
这个是我在开发中最常用到的编译脚本，我其他的基于 Nutz 的项目在，在 Nutz 代码更新时，我就运行一下，其他的项目一刷新，就升级到这个 Jar 文件了。

在 /trunk/build 目录下你能看到 build.bat（写给 windows的）以及 build（写给 Linux）的。你可以将其拷贝到你的 PATH 目录下，以便你在控制台执行。执行前，请先打开脚本文件，修改其中的内容。因为 build.xml 需要如下环境变量：

      * <b>`TOMCAT_HOME `</b>: 你的 tomcat 安装目录，这目录下应该有 lib 目录，下面包括了 servlet-api.jar
      * <b>`JAVA_HOME `</b>: 你的 JDK 安装目录，这目录下应该有 jre/lib/rt.jar
      * <b>DEPS </b>: 第三方 jar 包存放的目录，这个目录下应该有 log4j.jar
      * <b>OUTPUT </b>: 成功编译后 nutz 的 jar 包的输出目录
      * <b>`PROJECT_HOME `</b>: Nutz 的项目目录，这个目录下应该有 src 目录
正确的设置这些环境变量后，运行这个脚本，Nutz 的 jar 就会出现在你的输出目录中

----

<p align="right">[#Top]</p>
=`build2.xml - 全面编译脚本`=
每次发布前，我们都会运行一下这个脚本，因为它要运行单元测试，所以你需要更多的依赖包

这个脚本现在只是用作内部使用，Wendal 在里面做了详细的描述，根据我的经验，只要你把需要的 jar 包都放在依赖目录下，它会正常运行的。

