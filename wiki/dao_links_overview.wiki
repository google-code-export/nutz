#summary 字段的映射
=Top=
<p align="center"><font size=6>* 字段的映射 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="3"/>
----

<p align="right">[#Top]</p>
=`Nutz.Dao 支持的映射`=
在结构化数据库设计中，很多应用都会用到数据与数据的关联。关联有三种形式


<p align="right">[#Top]</p>
==`一对一映射`==
http://www.dtresearch.cn/web/_temp/1026/wiki_imgs/links_one.png

一个对象中有一个字段指向另外一个对象的主键。如上图， Pet 中就可以有一个字段 master，通过自身的 masterId 指向一个 Master 对象，那么我们说 Pet.master 就是 Pet 对 Master 的一对一映射。


<p align="right">[#Top]</p>
==`一对多映射`==
http://www.dtresearch.cn/web/_temp/1026/wiki_imgs/links_many.png

`如上图，同理，一个 Master 自然就能对应多个 Pet ，所以， Master.pets （一个 List<Pet>） 就可以指向多个 Pet 对象， 那么我们说 Master.pets 就是 Master 对 Pet 的一对多映射。  `


<p align="right">[#Top]</p>
==`多对多映射`==
http://www.dtresearch.cn/web/_temp/1026/wiki_imgs/links_manymany.png

`如上图，通过一个中间数据表的两个字段，分别指向两个对象的主键，可以实现多对多映射。所以，Pet.foods（一个 List<Food>） 或者 Food.pets（一个List<Pet>）就是多对多映射。  `

----

<p align="right">[#Top]</p>
=`Nutz.Dao 如何支持映射`=
在 Nutz.Dao 中支持映射需要有如下两个步骤：

      # 在 POJO 对象中声明映射字段
      # 在你的调用代码中，通过[http://code.google.com/p/nutz/source/browse/trunk/src/org/nutz/dao/Dao.java org.nutz.dao.Dao 接口 ]获取映射字段的值
下面，我就通过一个简单的例子，为你详细讲解一下这两个步骤

----

<p align="right">[#Top]</p>
==`步骤一：在 POJO 中设置`==
通过 Nutz.Dao 的提供的这三个[entity_annotations.man 实体注解 ]

        * <b>@One </b>:<font color="#994400">一对一映射 </font>
        * <b>@Many </b>:<font color="#994400">一对多映射 </font>
        * <b>@ManyMany </b>:<font color="#994400">多对多映射 </font>
你可以为任意 POJO 对象设置映射。

----

<p align="right">[#Top]</p>
===`我将如何为你演示`===
按照前面的示例图，我将创建三个类

          * demo.dao.pojo.Pet
          * demo.dao.pojo.Master
          * demo.dao.pojo.Food
这三个对象，都有两个字段，一个是 id， 一个是 name，所以我为这三个类建立了一个父类 demo.dao.pojo.Pojo

{{{
public class Pojo {

	@Column
	@Id
	private int id;

	@Column
	@Name
	private String name;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

}
}}}

接下来，我会通过这三个对象 (<u>Pet, Master, Food </u>) 分别为你演示如何设置映射关系 (<u>@One, @Many, @ManyMany </u>)

----

<p align="right">[#Top]</p>
===`@One 的例子：demo.dao.pojo.Pet`===
{{{
@Table("t_pet")
public class Pet extends Pojo {

	@Column
	public int masterId;

	@One(target = Master.class, field = "masterId")
	public Master master;
	
}
}}}

其中：

          * <b>target </b>是目标 POJO 类 （<u> 通过此项，Nutz.Dao 能知道目标的表名 </u>）
          * <b>field </b>是本 POJO 类的关联字段名，这个字段用来存储目标[dao_primary_key POJO 类的主键 ]值。
          * 更多详情请参考：[dao_links_one 关于一对一映射 ]
----

<p align="right">[#Top]</p>
===`@Many 的例子：demo.dao.pojo.Master`===
{{{
@Table("t_master")
public class Master extends Pojo {

	@Many(target = Pet.class, field = "masterId")
	private List<Pet> pets;

	public List<Pet> getPets() {
		return pets;
	}

	public void setPets(List<Pet> pets) {
		this.pets = pets;
	}

}
}}}

其中：

          * <b>target </b>是目标 POJO 类 （<u> 通过此项，Nutz.Dao 能知道目标的表名 </u>）
          * <b>field </b>是是映射目标 POJO 类的关联字段名，这个字段用来存储本[dao_primary_key POJO 类的主键 ]值。
          * 更多详情请参考：[dao_links_many 关于一对多映射 ]
----

<p align="right">[#Top]</p>
===`@ManyMany 的例子：demo.dao.pojo.Food`===
{{{
@Table("t_food")
public class Food extends Pojo {

	@ManyMany(target = Pet.class, relation = "t_pet_food", from = "foodid", to = "petid")
	private List<Pet> pets;

	public List<Pet> getPets() {
		return pets;
	}

	public void setPets(List<Pet> pets) {
		this.pets = pets;
	}

}
}}}

其中：

          * <b>target </b>是目标 POJO 类 （<u> 通过此项，Nutz.Dao 能知道目标的表名 </u>）
          * <b>relation </b>关联表（<font color="#999999"><u>或者说：中间表 </u></font>）的表名
          * <b>from </b>关联表（<font color="#999999"><u>或者说：中间表 </u></font>）的表字段名，它用来映射本[dao_primary_key POJO 类的主键 ]值
          * <b>to </b>关联表（<font color="#999999"><u>或者说：中间表 </u></font>）的表字段名，它用来映射目标[dao_primary_key POJO 类的主键 ]值
          * 更多详情请参考：[dao_links_many_many 关于多对多映射 ]
----

<p align="right">[#Top]</p>
==`步骤二：通过 Dao 接口调用`==
设置完了 POJO 对象，下面我们就可以随意的使用它们啦。请看下面的例子：


<p align="right">[#Top]</p>
===`获取一对一映射`===
{{{
Pet pet = dao.fetch(Pet.class, "XiaoBai");
dao.fetchLinks(pet, "master");
System.out.println(pet.master.getName());
}}}


<p align="right">[#Top]</p>
===`获取一对多映射`===
{{{
Master master = dao.fetch(Master.class, 23);
dao.fetchLinks(master, "pets");
for (Pet pet : master.getPets())
	System.out.println(pet.master.getName());
}}}


<p align="right">[#Top]</p>
===`获取多对多映射`===
{{{
Food food = dao.fetch(Food.class, "Fish");
dao.fetchLinks(food, "pets");
for (Pet pet : food.getPets())
	System.out.println(pet.getName());
}}}


<p align="right">[#Top]</p>
===`一次获取一对一，以及多对多映射字段`===
如果为 Pet 增加一个字段：

{{{
@ManyMany(target = Food.class, relation = "t_pet_food", from = "petid", to = "foodid")
public List<Food> foods;
}}}

那么可以一次就获取这两个映射字段

{{{
Pet pet = dao.fetch(Pet.class, "XiaoBai");

dao.fetchLinks(pet, "master|foods");

System.out.println(pet.master.getName());
for(Food food : pet.foods)
	System.out.println(food.getName());
}}}

上例中，正则表达式  “<font color="#AA0000">master|foods </font>” 匹配了 Pet 对象两个字段 --<font color="#999999"><u>master, foods </u></font>，因此 这两个字段会被<b>fetchLinks </b>函数填充


<p align="right">[#Top]</p>
===`Nut.Dao 对于 Dao 可允许的操作`===
更多详情，请参看[dao_links_dao_operations Nutz.Dao 为映射提供的操作 ]

----

<p align="right">[#Top]</p>
=`关于 Nutz.Dao 映射以及相关的一些总结`=
      * POJO 类可以继承，子类的 @Table 和 @View 优先级最高
      * POJO 类的字段可以是 public，或者通过 getter/setter
      * Dao 接口可以操作映射字段的方法有
          * insertLinks
          * insertWith
          * fetchLinks
          * clearLinks
          * updateWith
          * updateLinks
          * deleteLinks
          * deleteWith
      * 每个方法的参数都有两个
          # <b>T obj </b>: POJO 对象实例
          # <b>String regex </b>: 一个正则表达式字符串，所有被该表达式匹配上的映射字段均会被该方法执行
              * 如果该字符串为 null，不会有字段被匹配上。
