#summary 本地化字符串
=Top=
<p align="center"><font size=6>* 本地化字符串 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`基本策略`=
每个 Mvc 框架都有自己的本地化字符串的解决方案， Nutz.Mvc 的这个是相当简陋的。 我只是个人觉得足够用了。下面我把它简单介绍一下：  

      * 假定所有的本地化字符串文件都会存放在某一目录下 
          * 这个目录下所有的 .properties 文件，将作为默认的本地字符串文件。 
          * 每一种语言都会是一个目录，目录名称对应一个 Locale 的 toString()，请参看 java.util.Locale 的 JDoc 
              * `比如简体中文，就是 zh_CN `
              * `比如美式英语，就是 en_US `
          * 目录下所有的 .properties 文件存放着该地区的字符串信息 
          *  .properties 文件需要按照 UTF-8 方式编码 
      * 目录，通过 @Localization("全路径") 声明在主模块上 
      * 当应用启动时，一次读入所有的字符串，并存入 ServletContext，属性名称为：“org.nutz.mvc.annotation.Localization” 
      * 应用可以自行设置当前 Session 是哪一个国家和地区 
          * Mvcs.setLocaleName(String localeName) 
      * 每次请求时，会根据 Session 中的 localeName，从 ServletContext 中将对应 Locale 的字符串取出，设入 Request 对象 
          * 属性名为 "msg" 
          * 如果当前会话没有被设置 Locale，则将 "msg" 设置成默认本地化字符串 
----

<p align="right">[#Top]</p>
=`使用方式`=
      * 在JSP 的任何地方里，你可以用 $ msg.xxxx  直接输出字符串的值 
      * 在你的代码任何地方通过 org.nutz.mvc.Mvcs 提供的帮助方法，你可以很方便的修改 
          * 会话中的 Locale 
          * 整个应用支持的语言列表: Mvcs.getLocaleNames(ServletContext context) 
----

<p align="right">[#Top]</p>
=`定制自己的本地化字符串方式`=
很简单是吗？ 你想将 Message 字符串存在 XML 里，或者你想换一种 Message 字符串的存储方式。 那么实现一个新的  *org.nutz.mvc.MessageLoader *，并在 @Localization 注解的 type 属性中注明就是了。 不过你的实现类必须有一个接受一个 String 类型参数的构造函数，以便 Nutz.Mvc 为你传入 @Localization 里面声明 的值。  

