<wiki:toc max_depth="4"/>
= 所谓 Ioc =
在我个人看来，Ioc 的概念很是简单：将一部分关于对象的依赖关系单独存储在某中介质里，并且 提供一个接口以及实现帮助使用者获得这些对象。做到这点便是一个合格的 Ioc 框架了。 

但是将依赖关系存储在什么地方呢？ Spring 选的是 XML， Guice 选的 Java （硬编码） 

而我是这样看的： 

      * 硬编码不好，因为在部署以后，我需要修改某个注入字段的值，是不可能的。
          * 通常我会建立一个常量类，存储系统运行的配置参数
          * 如果有了Ioc，我就可以建立一个普通的 JavaBean 替代我的这个常量类，并且它自然是 100% 可配置的
          * 如果硬编码，我的自己实现这些
      * XML 不好
          * 其实，到现在我还是没找到一个合适的编辑器
              * 太可视化了，我觉得失去控制感
              * 太不可视化，写起来很麻烦
          * 如果我有多个服务器，如果仅仅是我的核心配置 (XML) 更新，那么重新部署会比较麻烦，而且有可能出错
如果将应用分作两类： 

      * 小型应用场景 -- 仅有一个应用服务器
          * 将配置信息存放在文件中即可，但是
              * 在生产环境下，可能没有华丽的编辑器帮助你来编辑
              * 你的配置文件可能不太大
          * 所以 JSON 文件似乎是个很好的选择 -- 它写起来比 XML 更省事
      * 多个服务器负载均衡场景
          * 将配置信息存储在数据库中，会带来很多好处
              * 更新数据后，只要重新启动各个服务器即可
              * 便于开发一些内部管理工具，统计系统中的对象以及依赖关系
                  * 这样的系统通常功能会比较复杂
=Nutz.Ioc 的主要特点 =
同 Spring 和 Guice 一样，Nutz.Ioc 是一个轻便灵活的注入框架。它主要的特点是： 

      * 它的核心代码并没有假定注入信息的存储形式
          * 默认提供 JSON 以及数据库两种加载形式
          * 不排除兼容 Spring 配置文件的可能
          * 不排除兼容 Guice 的可能
      * 为对象提供了完整的周期相关接口
      * 为你的扩展，提供灵活的扩展点
      * org.nutz.ioc.Ioc 是个接口
      * 通过实现自己的 org.nutz.ioc.ObjLoader 你可以将依赖关系存成任何形式
          * 支持 Spring 不过就是写一个 ObjLoader 的新实现而已
          * ObjLoader 的接口不复杂，只有三个函数需要实现
          * 如果你要写自己的实现，请了解 [ioc_obj_loader.html ObjLoader 接口说明]
下面，我先以 JSON 文件为例，给大家一个 Hello World 

=一个简单的例子 =
在这个例子中，你需要一个普通的 Java 对象（<font color="#008800">将被 Ioc 的对象</font>），以及一个 JSON 配置文件。 

普通Java对象 Json 配置文件 调用代码 

一点总结 

