#summary 接口为映射提供的操作
=Top=
<p align="center"><font size=6>* 接口为映射提供的操作 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`关于映射操作的概述`=
对于映射对象，Nutz.Dao 提供了一整套的标准[basic_operations.html Dao 操作 ]。任何一个操作，都需要两个参数

{{{
<T> T xxxLinks(T obj, String regex);
}}}

比如获取所有映射内容：

{{{
<T> T fetchLinks(T obj, String regex);
}}}

*其中: *

      * 第一个参数 T obj， 是你要操作的对象
      * 第二个参数 String regex， 是个一个正则表达式，指明你要操作该对象的那些字段。
          * 大小写敏感
          * Nutz.Dao 会查看该对象所有声明了<font color="#888888">@One </font>,<font color="#888888">@Many </font>,<font color="#888888">@ManyMany </font>的字段，所有被此正则表达式匹配上的字段都将被执行相应操作
      * 总是返回该对象本身，有助于你连续书写类似如下的代码：
{{{
dao.fetchLinks(obj,"field1|field2").updateLinks(obj,"field3|field4");
}}}

      * <font color="#FF0000">*注意： *</font>这里的映射操作并不支持*级联 *，我经过反复权衡，决定还是暂时不支持级联操作
          * 无论 insert / update / delete / fetch / clear 都不支持级联
----

<p align="right">[#Top]</p>
=`操作清单`=
<wiki:toc max_depth="3"/>
----

<p align="right">[#Top]</p>
==`插入映射对象：insertLinks`==
如果我们有两个对象：

{{{
Pet pet = dao.fetch(Pet.class,"XiaoBai");
pet.setMaster(new Master("zzh"));
}}}

我们可以插入映射对象：

{{{
dao.insertLinks(pet,"master");
}}}

说明：

        * `t_pet 将不会被改动，所以，如果你的映射对象是  `*一对一映射 *<font color="#999999">@One </font>，那么你可能还需要自己再 update 一下
        * 参数<font color="#FF00FF">"master" </font>是个正则表达式，上例中它只匹配了一个字段
            * 如果匹配了多个字段，所有字段对应的对象，无论数组，集合还是 Map，都会被插入
        * 甚至 pet 不存在在数据库中，也能插入成功
----

<p align="right">[#Top]</p>
==`与映射对象一起插入：insertWith`==
如果我们有两个对象：

{{{
Pet pet = new Pet();
pet.setName("XiaoBai");
pet.setMaster(new Master("zzh"));
}}}

我们可以一次插入两个对象：

{{{
dao.insertWith(pet,"master");
}}}

说明：

        * 新的 pet 对象和 master 对象会同时被插入到数据库中
        * 如果有任何一个失败，操作都将回滚
----

<p align="right">[#Top]</p>
==`获取映射对象：fetchLinks`==
例如：

{{{
Pet pet = dao.fetchLinks(dao.fetch(Pet.class,"XiaoBai"),"master");
}}}

说明：

        * 此一句话，即可获取 pet 对象以及其关联映射字段 master
            * 因此，我也就没有设计*fetchWith *操作
        * 修改正则表达式<font color="#FF00FF">"master" </font>你可以一次获取更多的映射字段，如果你有的话
----

<p align="right">[#Top]</p>
==`清除映射关系：clearLinks`==
例如：

{{{
Pet pet = dao.fetchLinks(dao.fetch(Pet.class,"XiaoBai"),"master|foods");
dao.clearLinks(pet,"master|foods");
}}}

说明：

        * 上面的例句会一次删除*master *以及*foods *字段所对应的所有记录
        * 如果映射字段为<font color="#999999">@ManyMany </font>， 那么仅仅清空关联表内的记录
----

<p align="right">[#Top]</p>
==`与映射对象一起更新：updateWith`==
例如：

{{{
Pet pet = dao.fetchLinks(dao.fetch(Pet.class,"XiaoBai"),"master|foods");
pet.setName("XiaoHei");
pet.getMaster().setName("Peter");
dao.updateWith(pet,"master");
}}}

说明：

        * 上面的例子，会更新 pet 对象，以及 master 字段的 Master 对象
        * 如果映射字段是集合或者数组
            * 如果你移除某几个元素
                * 本操作并不会将数据库中对应的记录清除，它只更新剩下的元素
            * 如果你增加了几个元素
                * 本操作并不会在数据库中增加记录，它只更新已经在数据库中存在的元素
----

<p align="right">[#Top]</p>
==`更新映射对象：updateLinks`==
同上例，不过：

{{{
dao.updateLinks(pet,"master");
}}}

        * 仅仅有 master 字段对应的 Master 对象被更新
        * pet 对象不会被更新
----

<p align="right">[#Top]</p>
==`与映射对象一起删除deleteWith`==
{{{
Pet pet = dao.fetchLinks(dao.fetch(Pet.class,"XiaoBai"),"master|foods");
dao.deleteWith(pet, "master|foods");
}}}

说明：

        * 当前 pet 记录会被删除
        * master 记录会被删除
        * foods 记录会被删除，并且由于该字段是<font color="#999999">@ManyMany </font>， 关联表中相应的字段也会被清除
        * 总之， deleteWith 操作删除的会很彻底
----

<p align="right">[#Top]</p>
==`删除映射对象deleteLinks`==
同上例，不过:

{{{
dao.deleteLinks(pet, "master|foods");
}}}

说明：

        * 与*deleteWith *操作唯一不同的是，pet 对应的记录不会被删除
        * 总之， deleteLinks 会将关联映射删除的很彻底
