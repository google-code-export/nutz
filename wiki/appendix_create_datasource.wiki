#summary 如何创建 DataSource
=Top=
<p align="center"><font size=6>* 如何创建 DataSource *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)  *wendal* (<font color="#080"> wendal1985@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`内置的SimpleDataSource`=

<p align="right">[#Top]</p>
==`Nutz内置,非常适合新手!!`==


        * 自动加载NutDao所支持的数据库的驱动
        * 无额外依赖,适合新手试用
        * 非连接池,配置简单
        * 不建议在生产环境使用
        * 1.b.43开始提供,旧版本的Nutz可通过拷贝源文件的方式添加这个类

<p align="right">[#Top]</p>
==`SimpleDataSource: 直接书写 Java 代码`==
{{{
import org.nutz.dao.impl.SimpleDataSource;

...

SimpleDataSource ds = new SimpleDataSource();
//ds.setDriverClassName("org.postgresql.Driver"); //默认加载了大部分数据库的驱动!!
ds.setjdbcUrl("jdbc:postgresql://localhost:5432/mydatabase");
ds.setUsername("demo");
ds.setPassword("123456");
...
//ds.close();  // 这个DataSource不是一个连接池,所以关不关都行
}}}




<p align="right">[#Top]</p>
==`SimpleDataSource: 通过 Nutz.Ioc 的 JSON 配置文件`==
{{{
{
	dataSource : {
		type : "org.nutz.dao.impl.SimpleDataSource",
		fields : {
			jdbcUrl : 'jdbc:postgresql://localhost:5432/mydatabase',
			username : 'demo',
			password : '123456'
		}
	}
}
}}}




<p align="right">[#Top]</p>
==`SimpleDataSource: 通过 Nutz.Ioc 的 XML 配置文件`==
{{{
	<ioc xsi:noNamespaceSchemaLocation="nutz-ioc-0.1.xsd">
		<obj name="dataSource" type="org.nutz.dao.impl.SimpleDataSource">
			<field name="jdbcUrl"><str>jdbc:postgresql://localhost:5432/mydatabase</str></field>
			<field name="username"><str>demo</str></field>
			<field name="password"><str>123456</str></field>
		</obj>
	</ioc>
}}}




<p align="right">[#Top]</p>
==`附送一个完整的NutDao配置js文件`==


{{{
var ioc = {
	dao : {
		type : "org.nutz.dao.impl.NutDao",
		args : [{refer:"dataSource"}]
	},
	dataSource : {
		type : "org.nutz.dao.impl.SimpleDataSource",
		fields : {
			jdbcUrl : 'jdbc:postgresql://localhost:5432/mydatabase',
			username : 'demo',
			password : '123456'
		}
	}
}
}}}

----

<p align="right">[#Top]</p>
=`Apache DBCP`=

<p align="right">[#Top]</p>
==`dbcp: 直接书写 Java 代码`==
{{{
import org.apache.commons.dbcp.BasicDataSource;

...

BasicDataSource ds = new BasicDataSource();
ds.setDriverClassName("org.postgresql.Driver");
ds.setUrl("jdbc:postgresql://localhost:5432/mydatabase");
ds.setUsername("demo");
ds.setPassword("123456");
...
ds.close();  // 关闭池内所有连接
}}}


<p align="right">[#Top]</p>
==`dbcp: 通过 Nutz.Ioc 的 JSON 配置文件`==
{{{
{
	dataSource : {
		type : "org.apache.commons.dbcp.BasicDataSource",
		events : {
			depose : 'close'
		},
		fields : {
			driverClassName : 'org.postgresql.Driver',
			url : 'jdbc:postgresql://localhost:5432/mydatabase',
			username : 'demo',
			password : '123456'
		}
	}
}
}}}


<p align="right">[#Top]</p>
==`dbcp: 通过 Nutz.Ioc 的 XML 配置文件`==
{{{
	<ioc xsi:noNamespaceSchemaLocation="nutz-ioc-0.1.xsd">
		<obj name="dataSource" type="org.apache.commons.dbcp.BasicDataSource">
			<events>
				<depose>close</depose>
			</events>
			<field name="driverClassName"><str>org.postgresql.Driver</str></field>
			<field name="url"><str>jdbc:postgresql://localhost:5432/mydatabase</str></field>
			<field name="username"><str>demo</str></field>
			<field name="password"><str>123456</str></field>
		</obj>
	</ioc>
}}}

        * 注册了 depose 事件，当整个 Ioc 容器注销时，将<b>真正  </b>关闭所有池内连接
        * 关于 depose 事件，更多详情请参看[ioc_events 事件监听 ]
----

<p align="right">[#Top]</p>
=`C3P0`=

<p align="right">[#Top]</p>
==`c3p0: 直接书写 Java 代码`==
{{{
import com.mchange.v2.c3p0.ComboPooledDataSource;

...

ComboPooledDataSource ds = new ComboPooledDataSource();
ds.setDriverClass("org.postgresql.Driver");
ds.setJdbcUrl("jdbc:postgresql://localhost:5432/mydatabase");
ds.setUser("demo");
ds.setPassword("123456");
...
ds.close();  // 关闭池内所有连接
}}}


<p align="right">[#Top]</p>
==`c3p0: 通过 Nutz.Ioc 的 JSON 配置文件`==
{{{
{
	dataSource : {
		type : "com.mchange.v2.c3p0.ComboPooledDataSource",
		events : {
			depose : 'close'
		},
		fields : {
			driverClass : 'org.postgresql.Driver',
			jdbcUrl : 'jdbc:postgresql://localhost:5432/mydatabase',
			user : 'demo',
			password : '123456'
		}
	}
}
}}}


<p align="right">[#Top]</p>
==`c3p0: 通过 Nutz.Ioc 的 XML 配置文件`==
{{{
	<ioc xsi:noNamespaceSchemaLocation="nutz-ioc-0.1.xsd">
		<obj name="dataSource" type="com.mchange.v2.c3p0.ComboPooledDataSource">
			<events>
				<depose>close</depose>
			</events>
			<field name="driverClass"><str>org.postgresql.Driver</str></field>
			<field name="jdbcUrl"><str>jdbc:postgresql://localhost:5432/mydatabase</str></field>
			<field name="user"><str>demo</str></field>
			<field name="password"><str>123456</str></field>
		</obj>
	</ioc>
}}}

        * 注册了 depose 事件，当整个 Ioc 容器注销时，将<b>真正  </b>关闭所有池内连接
----

<p align="right">[#Top]</p>
=`Proxool`=

<p align="right">[#Top]</p>
==`proxool: 直接书写 Java 代码`==
{{{
import org.logicalcobwebs.proxool.ProxoolDataSource;

...

ProxoolDataSource ds = new ProxoolDataSource();
ds.setDriver("org.postgresql.Driver");
ds.setDriverUrl("jdbc:postgresql://localhost:5432/mydatabase");
ds.setUser("demo");
ds.setPassword("123456");
...
}}}


<p align="right">[#Top]</p>
==`proxool: 通过 Nutz.Ioc 的 JSON 配置文件`==
{{{
{
	dataSource : {
		type : "org.logicalcobwebs.proxool.ProxoolDataSource",
		fields : {
			driver : 'org.postgresql.Driver',
			driverUrl : 'jdbc:postgresql://localhost:5432/mydatabase',
			user : 'demo',
			password : '123456'
		}
	}
}
}}}


<p align="right">[#Top]</p>
==`proxool: 通过 Nutz.Ioc 的 XML 配置文件`==
{{{
	<ioc xsi:noNamespaceSchemaLocation="nutz-ioc-0.1.xsd">
		<obj name="dataSource" type="org.logicalcobwebs.proxool.ProxoolDataSource">
			<field name="driver"><str>org.postgresql.Driver</str></field>
			<field name="driverUrl"><str>jdbc:postgresql://localhost:5432/mydatabase</str></field>
			<field name="user"><str>demo</str></field>
			<field name="password"><str>123456</str></field>
		</obj>
	</ioc>
}}}

        * Proxool 没有提供关闭所有连接的函数，不过你可以参看它的官方文档，自己写一个释放所有连接的类，配置在 Ioc 容器的 depose 事件中
        * 关于 depose 事件，更多详情请参看[ioc_events 事件监听 ]-<b>通过实现一个触发器 </b>
----

<p align="right">[#Top]</p>
=`BoneCP`=

<p align="right">[#Top]</p>
==`bonecp: 直接书写 Java 代码`==
{{{
import com.jolbox.bonecp.BoneCPDataSource;

...

BoneCPDataSource ds = new BoneCPDataSource();
ds.setDriver("org.postgresql.Driver");
ds.setJdbcUrl("jdbc:postgresql://localhost:5432/mydatabase");
ds.setUsername("demo");
ds.setPassword("123456");
...

}}}


<p align="right">[#Top]</p>
==`bonecp: 通过 Nutz.Ioc 的 JSON 配置文件`==
{{{
{
	dataSource : {
		type : "com.jolbox.bonecp.BoneCPDataSource",
		events : {
			depose : 'close'
		},
		fields : {
			driverClass : 'org.postgresql.Driver',
			jdbcUrl : 'jdbc:postgresql://localhost:5432/mydatabase',
			username : 'demo',
			password : '123456'
		}
	}
}
}}}


<p align="right">[#Top]</p>
==`bonecp: 通过 Nutz.Ioc 的 XML 配置文件`==
{{{
	<ioc xsi:noNamespaceSchemaLocation="nutz-ioc-0.1.xsd">
		<obj name="dataSource" type="com.jolbox.bonecp.BoneCPDataSource">
			<events>
				<depose>close</depose>
			</events>
			<field name="driverClass"><str>org.postgresql.Driver</str></field>
			<field name="url"><str>jdbc:postgresql://localhost:5432/mydatabase</str></field>
			<field name="username"><str>demo</str></field>
			<field name="password"><str>123456</str></field>
		</obj>
	</ioc>
}}}

        * 注册了 depose 事件，当整个 Ioc 容器注销时，将<b>真正  </b>关闭所有池内连接
