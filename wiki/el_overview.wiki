#summary 表达式引擎简介
=Top=
<p align="center"><font size=6>* 表达式引擎简介 *</font></p>
----
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)  *wendal* (<font color="#080"> wendal1985@gmail.com </font>)</p>
<wiki:toc max_depth="2"/>
----

<p align="right">[#Top]</p>
=`为什么需要 EL 表达式引擎`=
现在 Nutz 支持了一个可嵌入式的表达式引擎。在你的程序里，你可以通过这个表达式引擎让你的配置文件更加动态。比如，你在处理你的配置文件信息，或者最终用户从界面提交上来的信息的时候，你可以通过这个表达式引擎将字符串计算处结果。

----

<p align="right">[#Top]</p>
=`近一步介绍表达式引擎`=
那么它怎么使用呢？

是的，我想这可能会是你脑海里闪出的第一个问题。并且，我想你真正想问的是:“它好用吗？”

而关于<b>"好用" </b>，还有下面这三层含义：


<p align="right">[#Top]</p>
==`它容易使用吗？`==
{{{
ElValue val = El.eval("3+4*5");
System.out.println( 23 == val.getInteger().intValue());  // 将打印 true
}}}

表达式接受的是字符串输入，输出是一个 ElValue 接口。 通过这个接口，你能拿到表达式的计算结果的 Java 形式，以便你后面的程序使用。


<p align="right">[#Top]</p>
==`它功能强大吗？`==
虽然在[el #一些表达式的例子 ]这一节我有更详细的例子，但是这里我必须要先概括几点：

<b>它支持变量 </b>，比如

{{{
Context context = Lang.context();
context.set("a", 10);
ElValue val = El.eval(context, "a*10");
System.out.println(val.getInteger().intValue());  // 将打印 100 
}}}

通过 Context 接口，你可以为你的表达式随意设置变量的值。它支持如下类型的 Java 数据

        * 整型 - int 或  Integer
        * 浮点 - float 或 Float
        * 长整 - long 或 Long
        * 布尔 - boolean 或 Boolean
        * 字符串 - String
        * `数组 - T[] `
        * `列表 - List<T> `
        * `集合 - Collection<T> `
        * `Map - Map<String,?> `
        * 普通 Java 对象
基本上，有了这些，你可以为所欲为了吧。


<p align="right">[#Top]</p>
==`它速度怎么样？`==
我觉得它速度不怎么样。它的工作的原理是这样的，每次解析都经过如果下三步

        # 解析符号列表
        # 将符号列表变成一颗二叉树，并返回根节点
        # 从跟节点递归计算
没有将表达式解析成一个后缀表达式，主要是因为从计算来讲，二叉树效率也过得去，加上个人有点犯懒，想先看看，如果效率实在不能接受再说。

当然我也提供了一个提升效率的手段，因为如果每次计算都经过这三个步骤当然慢，所以我们可以对它先预编译：

{{{
BinElObj exp = El.compile("a*10");  // 预编译结果为一个 ElObj

Context context = Lang.context();
context.set("a", 10);

ElValue val = exp.eval(context);
System.out.println(val.getInteger().intValue());  // 将打印 100 
}}}

表达式的预编译结果是 BinElObj 对象，它就是是二叉树根节点。它的 eval 函数是线程安全的，只要在多个线程内给它不同的 context 就是了。当然，你也可以在多个线程间共享同一个 Context，那运行起来一定很有趣，不是吗？

----

<p align="right">[#Top]</p>
=`支持什么样的操作符`=
我想但凡有机会和兴趣独到这篇文字的同学，一定是编程老手，即使是自称<b>小白 </b>的的同学们，你们对一个编程语言应该支持的操作符基本都差不多熟的不行，所以，我就不在这里唠叨操作符的具体细节了，我只给一个列表，告诉你我现在支持什么操作符。

另外，再加上一句：

<b>只要支持的操作符，我会让它的优先级以及行为会和 Java 的表达式一致。如果你发现不一致别犹豫，给我报 Issue 吧。 </b>

||符号||解释||
||.||访问对象的属性，或者Map的值，或者函数调用（需要结合后面是否有括号）||
||` ['abc']   `||Java 对象 Map按键值获得值||
||` [3]       `||数字，列表，或者集合的下标访问符号||
||` *         `||乘||
||/||整除||
||%||取模||
||+||加||
||-||减||
||` >=        `||大于等于||
||` <=        `||小于等于||
||==||等于||
||!=||不等于||
||` >         `||大于||
||` <         `||小于||

当然，同任何编程语言一样，表达式也支持 左括号<font color="#0000AA"><b>( </b></font>以及 右括号<font color="#0000AA"><b>) </b></font>，来控制表达式的的计算优先级别

----

<p align="right">[#Top]</p>
=`一些表达式的例子`=

<p align="right">[#Top]</p>
==`普通运算`==
{{{
System.out.println(El.eval("3+2*5"));
// 输出为  13
}}}




<p align="right">[#Top]</p>
==`字符串操作`==


{{{
System.out.println(El.eval("  abc  ".trim()));
// 输出为  abc
}}}




<p align="right">[#Top]</p>
==`Java 对象属性属性访问调用`==


{{{
Context context = new Context();
Pet pet = new Pet();
pet.setName("GFW");
context.set("pet",pet);
System.out.println(El.eval(context,"pet.name"));
// 输出为  GFW
}}}




<p align="right">[#Top]</p>
==`函数调用`==


{{{
Context context = new Context();
Pet pet = new Pet();

El.eval(context, "pet.setName('XiaoBai')");

System.out.println(El.eval(context,"pet.getName()"));
// 输出为  XiaoBai
}}}




<p align="right">[#Top]</p>
==`数组访问`==


{{{
Context context = new Context();
context.set("x",Lang.array("A", "B", "C"));

System.out.println(El.eval(context,"x[0].toLowerCase()"));
// 输出为  a
}}}




<p align="right">[#Top]</p>
==`列表访问`==


{{{
Context context = new Context();
context.set("x",Lang.list("A", "B", "C"));

System.out.println(El.eval(context,"x[0].toLowerCase()"));
// 输出为  a
}}}




<p align="right">[#Top]</p>
==`Map 访问`==


{{{
Context context = new Context();
context.set("map",Lang.map("{x:10, y:5}"));

System.out.println(El.eval(context,"map['x'] * map['y']"));
// 输出为  50
}}}




<p align="right">[#Top]</p>
==`判断`==


{{{
Context context = new Context();
context.set("a",5);

System.out.println(El.eval(context,"a>10"));
// 输出为  false

context.set("a",20);
System.out.println(El.eval(context,"a>10"));
// 输出为  true
}}}



