#summary  成为代码提交者
<p align="right"> <font color="#AAA" size="1"> * By * </font>    *zozoh* (<font color="#080"> zozohtnt@gmail.com </font>)</p>
<p align="center"><font size=6>*  成为代码提交者 *</font></p>
----
<wiki:toc max_depth="2"/>
= 如果你已经是代码提交者 =
==你需要知道 ==
        * Nutz 特点是代码短 （<font color="#AAAAAA">以不影响阅读为前提</font>）
        * 如果你指出，某一个函数或者类其实无用，是最大的贡献
        * 删掉一段代码的贡献，比增加一段代码的贡献要大，至少不比它小
        * 如果你有机会能将代码减少一行，既不影响阅读，也不影响效率，你的贡献很杰出
        * 你只需要关注代码的质量
        * 实现什么样的功能，由社区决定
        * 如何实现，由你决定
        * 无论任何时候，同样的功能，一段更短的代码，就比更长的代码要好。
==所以你必须遵守这样的编码原则 ==
        * 类名
            * 最好为为名词
            * 如果是运行一次，就抛弃的类，以 ing 结尾，比如 *Rendering*
            * 类名尽量短，但是最好不要缩写，如果缩写，必须为特别常用的类，比如 org.nutz.dao.Cnd
                * 因为调用者书写你的类名太长，他(她)的IDE会自动替他(她)换行，他会觉得有点不爽
            * 不要和 Java 的标准库中的类名冲突，比如 Class, Object, String 等
                * 如果冲突，就表示你极其藐视 Java 标准库中的那个的设计
        * 成员变量名
            * 最好为单数名词
            * 能 private 就不要 default，能 default 就不要 protected，最好不要 public
            * 如果是集合或数组，用复数名词，不用加 xxxMap 或者 xxxList，没有意义
            * 不要用一个字母，尤其是 i，你可以用 index 或者 cursor 来代替
        * 局域变量名尽量要用1-2 个字母，比如 StringBuilder sb
        * 函数名 （无论是静态还是动态）
            * 尽量遵守 Java 的编码约定
            * 如果是 setter 类函数可以考虑遵循 jQuery 的编码原则
                * 返回 this，以便链式赋值
                * setXXX(String s) 可以用 xxx(String s) 替代 // 仅仅是建议
            * 上述两个原则灵活掌握，总之，你要考虑到，使用的的 IDE 在 100 字自动折行的情况下，你的函数不太可能会被折行
==关于代码重写 ==
        * 接口的实现可以随时被重写，没关系，我们有版本控制，可以回滚
        * 你的每一次提交，必须都是编译通过的
        * 你的每一次提交，最好都是通过 JUnit 测试的
        * 除非有特别的情况 -- 比如你要和其他人分享的修改
        * 我希望服务器上的代码通不过 JUnit 测试的情况，不要持续 3 天以上。最好，它时时刻刻都是可以通过全部 JUnit 测试的。
==关于翻天覆地的重写 ==
        * Nutz 的版本为 主版本号.发布流水号
        * 相同的主版本号，向下兼容
        * 不同的主版本号，未必兼容，或者可能根本不兼容
        * 重写实现，会增加发布流水号
        * 重新设计接口，会增加主版本号
        * 实际上，我认为在相当长的一段时间里，我们没有经历维护两个或两个以上的版本，Nutz 应该只有 trunk
=如果你不是，但是想成为代码提交者 =
      * 你需要申请加入社区， 发信至： nutzam@googlegroups.com
      * 通过社区，你可以让我们了解你，如果你发的贴很有价值，我们会考虑邀请你成为代码提交者
      * 或者你可以直接给任何一个 Nutz 的代码提交者发信， 指出 Nutz 代码哪里存在不足，并提供修改建议。
          * 如果连续五次，你的修改建议被接受，我们会邀请你成为 Nutz 的代码提交者 -- 当然你可以拒绝
      * 除此之外，没有其他的途径
